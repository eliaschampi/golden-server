// Code generated by sqlc. DO NOT EDIT.
// source: contacts.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createContact = `-- name: CreateContact :one
INSERT INTO contacts (name, type, email, phone, address, description)
VALUES ($1, $2, $3, $4, $5, $6) RETURNING code, name, type, email, phone, address, description, created_at, updated_at
`

type CreateContactParams struct {
	Name        string
	Type        string
	Email       sql.NullString
	Phone       sql.NullString
	Address     sql.NullString
	Description sql.NullString
}

func (q *Queries) CreateContact(ctx context.Context, arg CreateContactParams) (Contact, error) {
	row := q.db.QueryRowContext(ctx, createContact,
		arg.Name,
		arg.Type,
		arg.Email,
		arg.Phone,
		arg.Address,
		arg.Description,
	)
	var i Contact
	err := row.Scan(
		&i.Code,
		&i.Name,
		&i.Type,
		&i.Email,
		&i.Phone,
		&i.Address,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getContacts = `-- name: GetContacts :many
SELECT code, name, type, email, phone, address, description, created_at, updated_at from contacts
`

func (q *Queries) GetContacts(ctx context.Context) ([]Contact, error) {
	rows, err := q.db.QueryContext(ctx, getContacts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Contact{}
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.Code,
			&i.Name,
			&i.Type,
			&i.Email,
			&i.Phone,
			&i.Address,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
